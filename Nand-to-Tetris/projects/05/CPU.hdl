// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
        // CHeck what type of instruction it is
        Not(in=instruction[15], out=AInstruction);
        Not(in=AInstruction,out=CInstruction);

        // If a instruction is provided, use that
        Mux16(a=ALUOutput, b=instruction, sel=AInstruction, out=ARegisterInstruction);

        // Check wethere it is a instruction, or A-Register Destination bit is set
        Or(a=AInstruction, b=instruction[5], out=loadA);
        // Output address if Aregister is set
        ARegister(in=ARegisterInstruction, load=loadA, out=ARegister, out[0..14]=addressM);

        // Check which input to use, ARegister or inM
        Mux16(a=ARegister, b=inM, sel=instruction[12], out=ALUSource2);

        // Check if d-register is to be set
        And(a=instruction[4], b=CInstruction, out=loadD);
        DRegister(in=ALUOutput, load=loadD, out=DRegister);     // set D register

        // Check if need to write to M, and output M
        And(a=CInstruction, b=instruction[3], out=writeM, out=CanOutM);

        // Perform ALU Operations
        ALU(x=DRegister, y=ALUSource2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, zr=outEquals0, ng=outNegative);

        // OutputM if write to M set
        Mux16(a=false, b=ALUOutput, sel=CanOutM, out=outM);

        // Check if ALU output is positive
        Or(a=outNegative, b=outEquals0, out=isPositive);
        Not(in=isPositive, out=outPositive);

        // Check if any jump conditions is true
        And(a=instruction[2], b=outNegative, out=outJLT);
        And(a=instruction[1], b=outEquals0, out=outJEQ);
        And(a=instruction[0], b=outPositive, out=outJGT);

        // Check if need to jump
        Or(a=outJLT, b=outJEQ, out=JMPCheck1);
        Or(a=JMPCheck1, b=outJGT, out=JMP);

        // Check if need to increment
        And(a=CInstruction, b=JMP, out=Load);
        Not(in=Load, out=Increment);

        // Implement Program COunter
        PC(in=ARegister, load=Load, inc=Increment, reset=reset, out[0..14]=pc);
        

}